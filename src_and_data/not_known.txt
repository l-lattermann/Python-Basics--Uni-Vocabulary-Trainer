Q: Define NULL Value. [1.1 Basic Concepts of the Relational Data Model]
A:
A NULL value indicates missing or unknown information in a record. Though it holds no value, it may still occupy storage space.
Q: What is the distinction between a database, a DBMS, and a database system? [1.1 Basic Concepts of the Relational Data Model]
A:

	•	database → stores data
	•	DBMS → manages access
	•	database system → DB + DBMS

A database is a structured collection of data stored efficiently on a storage medium like a hard drive. A Database Management System (DBMS) is the software that controls and manages access to the database, typically serving as the interface between applications and the stored data. A database system refers to the complete setup, consisting of both the DBMS and the database itself.
Q: What is the AS keyword used for in SQL? [2.1 Querying Data (SELECT)]
A:

 AS     
	renames a column or table in the result set
        SELECT Name AS CountryName FROM Country;
        → renames “Name” column to “CountryName” in output

        SELECT Continent, COUNT() AS CountryCount FROM Country GROUP BY Continent;
        → column with COUNT() appears as “CountryCount”

The AS keyword assigns an alias to a column or table for clearer results. It does not rename anything in the database—only in the displayed output. This is especially useful when using functions or improving readability.
Q: In terms of Activities in the Design Process for Databases, what does the step “Define Relationships” mean/involve? [4.1 Logical Database Design Activities]
A:

	•	link entities
	•	specify cardinalities
	•	create conceptual model

After entities are identified, their relationships are defined, including the cardinalities that specify how many instances can be linked. The resulting conceptual data model depicts entities and their interconnections before physical implementation.
Q: Define Data Record (Tuple). [1.1 Basic Concepts of the Relational Data Model]
A:
A data record (or tuple) is a single row in a table and corresponds to one tuple in the relation. It represents one instance of an entity.
Q: What is ORDER BY used for in SELECT … ORDER BY …? [2.3 Sort Query Output (ORDER BY)]
A:
	SELECT Name, Population FROM Country ORDER BY Population DESC;

The ORDER BY clause sorts the result set by one or more columns. Here, countries are sorted in descending order by population.
Q: How are N:M relationships represented in relational databases? [3.2 Relationships and Cardinalities in ER Models]
A:

•	via relationship tables
•	contain only foreign keys from related tables
•	use composite primary key (e.g., ADDRESSID + CUSTOMERID)

N:M (many-to-many) relationships are implemented using relationship tables that store associations between entities from two different relations. These tables include only the foreign keys referencing the primary keys of the related tables—such as CUSTOMERID and ADDRESSID. The primary key of the relationship table is usually a composite key formed by combining these foreign keys, ensuring that each pairing is unique (e.g., one customer assigned to one billing address).
Q: What do the cardinality notations N, C, CN, and CM represent in ER modeling? [3.2 Relationships and Cardinalities in ER]
A:

•	N   = 1*   (mandatory)
•	C   = 0..1 (optional)
•	CN  = 0*   (optional)
•	CM  = 0*   (optional)

In ER modeling, cardinality notations describe how many instances of one entity can be associated with instances of another and whether the relationship is optional. “N” implies mandatory multiplicity (at least one), while “C” allows for omission. “CN” and “CM” both indicate an optional relationship to many, i.e., zero or more.

Q: What is GROUP BY used for in SELECT … GROUP BY …? [2.4 Queries with Group Formation (GROUP BY)]
A:
	SELECT Continent, COUNT(*) FROM Country GROUP BY Continent;

The GROUP BY clause groups rows by a specified column—in this case Continent—so that aggregate functions like COUNT(*) can be applied per group.
Q: What is CONCAT used for in SQL? [2.1 Querying Data (SELECT)]
A:
 CONCAT(arg1, …, argN)  
	combines values into a single string
        SELECT CONCAT(Name, ’ ’, Code) FROM Country;
        → joins Name and Code with a space in between
Q: What are the four sublanguages of SQL and what is their purpose? [1.3 SQL and Relational Database Systems]
A:

	•	DML: Data Manipulation Language → manipulate data (e.g., SELECT, INSERT, UPDATE, DELETE)
	•	DDL: Data Definition Language → define schema structure (e.g., CREATE, ALTER, DROP)
	•	TCL: Transaction Control Language → manage transactions (e.g., COMMIT, ROLLBACK)
	•	DCL: Data Control Language → control user access (e.g., GRANT, REVOKE)

SQL is composed of four functional sublanguages, each targeting a different aspect of database operations. The Data Manipulation Language (DML) handles data-level actions like querying or modifying records. The Data Definition Language (DDL) is used to create or alter the structure of database schemas. Transaction Control Language (TCL) ensures safe and consistent execution of grouped DML commands. Lastly, Data Control Language (DCL) manages user permissions and access control to database resources.
Q: What are subqueries with exactly one return value used for in SQL? [2.5 Subqueries with Nested SELECT Statements]
A:

 =, <, >, <=, >=   
	can be used if subquery returns a single value

        SELECT Name
        FROM Country
        WHERE Area =
           (SELECT MAX(Area) FROM Country);
           → returns country with largest area

Subqueries that retre typically used with comparison operators like =, <, or >. This is possible when the subquery returns a single column with a single row, often achieved using aggregate functions like MAX() or AVG(). If the subquery returns more than one value, a runtime error occurs.
Q: Define Foreign Key. [1.1 Basic Concepts of the Relational Data Model]
A:
A foreign key is an attribute in one table that references the primary key of another table, forming a relational link between the two.
Q: What actions can be defined with ON UPDATE and ON DELETE to preserve referential integrity in SQL? [4.3 Creating Tables in SQL Databases from ER Diagrams]
A:

• CASCADE	– automatically update/delete referencing rows.
• SET NULL	– set foreign key to NULL (must allow NULL).
• RESTRICT	– prevent update/delete of referenced row.
• NO ACTION 	– do nothing (may break integrity).
• SET DEFAULT 	– set foreign key to a default value.

When a foreign key is defined, ON UPDATE controls behavior when the referenced key changes, and ON DELETE controls behavior when the referenced row is deleted. These options dictate how the DBMS maintains data consistency across related tables.
Q: What is SELECT used for in SELECT …? [2.1 Querying Data (SELECT)]
A:
	SELECT Name, Capital FROM Country;

The SELECT clause specifies which columns to return from the table. In this case, only the columns Name and Capital will be included in the output.
Q: What is CONCAT_WS used for in SQL? [2.1 Querying Data (SELECT)]
A:
 CONCAT_WS(separator, arg1, …, argN)  
	combines values into one string using a separator
        SELECT CONCAT_WS(’ ’, Name, Code, Area, ‘;’) FROM Country;
        → joins Name, Code, Area and adds space and semicolon as separators
Q: What is cardinality in the context of entity relationships? [3.2 Relationships and Cardinalities in ER Models]
A:
	•	defines number of associations between entities
	•	described as 1:1, 1:N, or N:M
	•	also called arity or multiplicity

Cardinality describes how many instances of one entity can be associated with instances of another in a relationship. A 1:1 relationship links one entity to exactly one other, 1:N links one to many, and N:M links many entities to many others. These patterns help structure relational schemas and are also referred to as arity or multiplicity in data modeling.
Q: What is HAVING used for in SELECT … GROUP BY … HAVING …? [2.4 Queries with Group Formation (GROUP BY)]
A:
	SELECT Continent, COUNT(*) FROM Country GROUP BY Continent HAVING COUNT(*) > 1;

The HAVING clause restricts groups created by GROUP BY. This query only returns continents that appear more than once in the table.
Q: Define Entity Set. [1.1 Basic Concepts of the Relational Data Model]
A:
An entity set is a collection of entities of the same type that share the same attributes. In databases, it corresponds to all rows of a table.
Q: Define Entity. [1.1 Basic Concepts of the Relational Data Model]
A:
An entity is a distinguishable object or concept in the real world that can be uniquely identified, such as a customer or order.
Q: What are BETWEEN, LIKE, IS NULL, IS NOT NULL, and IN used for in a SQL WHERE clause? [2.2 Query Data with Condition (WHERE)]
A:
 BETWEEN 
	restrict to value range
        SELECT Name FROM Country WHERE Population BETWEEN 6000000 AND 100000000;

 LIKE
	match a pattern
        SELECT Name FROM Country WHERE Name LIKE ‘G%Y’;

 IS NULL 
	check for NULL value
        SELECT Name FROM Country WHERE Code IS NULL;

 IS NOT NULL 	
	ensure a value exists
        SELECT Name FROM Country WHERE Code IS NOT NULL;

 IN      
	check membership in a list
        SELECT Name FROM Country WHERE Continent IN (‘America’, ‘Europe’);

These SQL operators support advanced filtering. BETWEEN selects values in a given range. LIKE searches using wildcards (%, _). IS NULL and IS NOT NULL handle missing or existing data. IN tests whether values match any in a given set.
Q: What are NOT, OR, and AND used for in a SQL WHERE clause? [2.2 Query Data with Condition (WHERE)]
A:
	SELECT Name FROM Country WHERE NOT Continent = 'America';

	SELECT Name FROM Country WHERE Continent = 'America' OR Continent = 'Africa';

	SELECT Name FROM Country WHERE Continent = 'Europe' AND Percentage = 100;

The logical operators NOT, OR, and AND are used in SQL to filter query results based on compound conditions. NOT excludes rows that meet a specified condition. OR returns rows that satisfy at least one of multiple conditions. AND returns only rows that satisfy all specified conditions simultaneously. These operators are essential for building precise and flexible query filters.
Q: What are some common relational database management systems (RDBMSs)? [1.3 SQL and Relational Database Systems]
A:

	•	MariaDB → open-source, MySQL spin-off, free for commercial use
	•	Oracle Database → commercial enterprise-grade RDBMS
	•	IBM DB2 → commercial, large-scale database solution
	•	Microsoft SQL Server → commercial, Windows-optimized RDBMS

MariaDB is a popular open-source relational DBMS derived from MySQL and used widely in small to medium-sized applications, offering broad platform support without licensing fees. In contrast, commercial RDBMSs like Oracle Database, IBM DB2, and Microsoft SQL Server are proprietary systems commonly deployed in enterprise environments with advanced scalability, security, and support features.
Q: What are the main advantages of using a database over simple file storage? [1.1 Basic Concepts of the Relational Data Model]
A:

	•	efficient data access
	•	support for multi-user access
	•	fine-grained access control
	•	crash recovery
	•	support for complex queries

Databases offer several advantages over flat files, such as optimized access to relevant data, support for concurrent multi-user operations, permission-based access control, and crash safety mechanisms. They also make it possible to perform complex evaluations across multiple datasets with minimal effort.
Q: What are the main aggregate functions in SQL and how are they used? [2.4 Queries with Group Formation (GROUP BY)]
A:

 COUNT()    
	counts number of rows
        SELECT COUNT() AS TotalCountries FROM Country;
        → total number of countries

 SUM(column)  
	sums all values in a column
        SELECT Continent, SUM(Area) AS AreaPerContinent FROM Country GROUP BY Continent;
        → total area per continent

 AVG(column)  
	calculates the average value in a column
        SELECT Continent, AVG(Area) AS AvgArea FROM Country GROUP BY Continent;
        → average area per country in each continent

 MAX(column)  
	finds the highest value in a column
        SELECT Continent, MAX(Area) AS LargestCountry FROM Country GROUP BY Continent;
        → largest country per continent

 MIN(column)  
	finds the lowest value in a column
        SELECT Continent, MIN(Area) AS SmallestCountry FROM Country GROUP BY Continent;
        → smallest country per continent
Q: Define Attribute (or Property). [1.1 Basic Concepts of the Relational Data Model]
A:
An attribute is a named property of an entity, represented as a column in a table. It has a unique name and a defined domain of valid values.
Q: Define Artificial Key (Surrogate Key). [1.1 Basic Concepts of the Relational Data Model]
A:
An artificial or surrogate key is a system-generated attribute (often an auto-increment integer) used as a primary key when no natural key is available. It carries no real-world meaning.
Q: What is a composite primary key, and what rules must all primary keys follow? [3.2 Relationships and Cardinalities in ER Models]
A:

	•	primary key = unique + non-null
	•	composite key = combination of multiple fields
	•	(ADDRESSID, CUSTOMERID) in a relationship table

A primary key is a field or set of fields in a relational database table that uniquely identifies each row. It must satisfy two conditions: every value must be unique across the table, and the field(s) must be non-null. A composite primary key is formed when no single field is sufficient for uniqueness, so a combination of fields (e.g., ADDRESSID and CUSTOMERID) is used instead. This is common in relationship tables that link N:M relations.
Q: What is SQL and how is it standardized? [1.3 SQL and Relational Database Systems]
A:

	•	SQL = Structured Query Language
	•	used for querying and manipulating data
	•	standardized by ISO/IEC 9075

SQL (Structured Query Language) is the internationally standardized language used to define, query, and manipulate data in relational databases. It enables users to perform operations such as SELECT, INSERT, DELETE, and UPDATE. SQL is formalized under the ISO/IEC 9075 standard, ensuring consistency across different relational database management systems.
Q: What are subqueries used for in SQL SELECT statements? [2.5 Subqueries with Nested SELECT Statements]
A:

 Used for                                     
	→ dynamic filtering within queries

SELECT Name, Area
FROM Country
WHERE Area > 
	(SELECT AVG(Area) FROM Country);

→ returns countries above average area

Subqueries (nested SELECT statements) allow comparing table values against dynamically calculated results. They’re used in WHERE or HAVING clauses when the filtering condition must be derived from the current data, like calculating an average or identifying maximum values in real time.
Q: What is DISTINCT used for in a SELECT query? [2.1 Querying Data (SELECT)]
A:
	SELECT DISTINCT Continent FROM Country;

The DISTINCT keyword is used to remove duplicate rows from the result set of a SELECT query. It ensures that only unique combinations of values in the selected columns are returned. In this example, even if multiple countries belong to the same continent, each continent will appear only once in the output.
Q: How do you sort by multiple columns with different orders? [2.3 Sort Query Output (ORDER BY)]
A:
 ORDER BY col1 ASC, col2 DESC  
	specifies sort direction for each column individually
        SELECT Name FROM Country ORDER BY Continent ASC, Percentage DESC, Name ASC;
        → sorts by continent (A–Z), then by percentage (high to low) within same continent, then name (A–Z) within the same percentage

This allows fine-grained control over sorting priority and direction, useful when ordering based on complex criteria.
Q: How do you sort by multiple columns in the same order? [2.3 Sort Query Output (ORDER BY)]
A:
 ORDER BY col1, col2 ASC  
	sorts by multiple columns, all ascending
        SELECT Name FROM Country ORDER BY Continent, Name ASC;
        → sorts first by continent, then alphabetically by name within each continent

This variant sorts rows using multiple columns, applying the same direction (ASC or DESC) to all columns.
